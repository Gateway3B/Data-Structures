import java.util.LinkedList;

public class SparseMatrix implements SparseInterface{
	
	//Defines the node of the linked list with the variables row, col, and data.
	class MatrixElement {
		
		int row;
		int col;
		int data;
		
		public MatrixElement(int row, int col, int data)
		{
			this.row = row;
			this.col = col;
			this.data = data;
		}
	}
	
	//Tracks the size of the matrix.
	int size;
	//Creates the matrix.
	LinkedList<MatrixElement> matrix = new LinkedList<MatrixElement>();
	
	//Instantiates the matrix as size 5.
	public SparseMatrix()
	{
		this.size = 5;
	}
	
	//Deletes all values in the matrix, setting everything to 0.
	public void clear()
	{
		matrix.clear();
	}
	
	//Clears the matrix then sets a new size by modifying the variable size.
	public void setSize(int size)
	{
		//Throws error if the size 
		matrix.clear();
		this.size = size;
	}

	//Adds an element or replaces an element in the matrix.
	public void addElement(int row, int col, int data)
	{
		//Throws error if the inputs row and col are out of bounds of the size of the matrix.
		//Throws error if data <=0
		if(row >= this.size || col >= this.size || data <= 0 || row < 0 || col < 0)
		{
			throw new ArrayIndexOutOfBoundsException();
		}
		int i;
		//Traverses the elements in the linked list and if it finds an element with the same row and col values it overrides that elements data.
		for(i = 0; i < matrix.size(); ++i)
		{
			if(matrix.get(i).row == row && matrix.get(i).col == col)
			{
				matrix.get(i).data = data;
				return;
			}
		}
		//If an already existing element is not found with the input row and col value a new element is created.
		matrix.add(0, new MatrixElement(row, col, data));
	}
	
	//Removes an element from the linked list.
	public void removeElement(int row, int col)
	{
		//Throws error if the inputs row and col are out of bounds of the size of the matrix.
		if(row >= this.size || col >= this.size || row < 0 || col < 0)
		{
			throw new ArrayIndexOutOfBoundsException();
		}
		//Traverses the linked list till it finds an element with the same row and col value as the inputs then removes it.
		for(int i = 0; i<this.size; ++i)
		{
			if(matrix.get(i).row == row && matrix.get(i).col == col)
			{
				matrix.remove(i);
				break;
			}
		}
	}

	//Returns the value of the element at the specified row and col.
	public int getElement(int row, int col)
	{
		//Throws error if the inputs row and col are out of bounds of the size of the matrix.
		if(row >= this.size || col >= this.size || row < 0 || col < 0)
		{
			throw new ArrayIndexOutOfBoundsException();
		}
		//Traverses the linked list till it finds an element with the row and col inputed then returns its data.
		for(int i = 0; i<this.matrix.size(); ++i)
		{
			if(matrix.get(i).row == row && matrix.get(i).col == col)
			{
				return matrix.get(i).data;
			}
		}
		return 0;
	}
	
	//Returns a new matrix that deletes the elements on the specified row and col and reduces the size of the matrix by 1.
	public SparseMatrix minor(int row, int col)
	{
		//Throws error if the inputs row and col are out of bounds of the size of the matrix.
		if(row >= this.size || col >= this.size || row < 0 || col < 0)
		{
			throw new ArrayIndexOutOfBoundsException();
		}
		//Creates a new SparseMatrix.
		SparseMatrix minor = new SparseMatrix();
		minor.setSize(this.getSize()-1);
		//Traverses the linked list and fills the linked list of minor.
		for(int i = 0; i < this.matrix.size(); ++i)
		{
			//Adds elements that have row and col less than input row and col.
			if(row > matrix.get(i).row && col > matrix.get(i).col)
			{
				minor.addElement(matrix.get(i).row, matrix.get(i).col, matrix.get(i).data);
			}
			//Adds elements with row greater than input row and col less than input col and updates the row to be one less because a row has been removed.
			else if(row < matrix.get(i).row && col > matrix.get(i).col)
			{
				minor.addElement(matrix.get(i).row-1, matrix.get(i).col, matrix.get(i).data);
			}
			//Adds elements with row less than input row and col greater than input col and updates the col to be one less because a row has been removed.
			else if(col < matrix.get(i).col && row > matrix.get(i).row)
			{
				minor.addElement(matrix.get(i).row, matrix.get(i).col-1, matrix.get(i).data);
			}
			//Adds elements with row greater than input row and col greater than input col and updates the row and col to be one less because a row and col have been removed.
			else if(col < matrix.get(i).col && row < matrix.get(i).row)
			{
				minor.addElement(matrix.get(i).row-1, matrix.get(i).col-1, matrix.get(i).data);
			}
		}
		return minor;
	}
	
	//Calculates the determinate of the SparseMatrix.
	public int determinant()
	{
		//Edge case when the size of the matrix is 1x1. Will only happen if the matrix is defined as 1 before det is called.
		if(this.size == 1)
		{
			return this.getElement(0,0);
		}
		//Base case when the size of the matrix is 2x2.
		if(this.size == 2)
		{
			return (this.getElement(0, 0) * this.getElement(1, 1)) - (this.getElement(0, 1) * this.getElement(1,  0));
		}
		int det = 0;
		//Calculates det by recursively calling minor according to the determinate algorithm. 
		for(int col = 0; col < this.size; ++col)
		{
			det += this.minor(0, col).determinant() * this.getElement(0, col) * ((int)java.lang.Math.pow(-1,col));
		}
		return det;
	}
	
	//Returns a string containing the lined list values.
	public String toString()
	{
		String str = "";
		for(int row = 0; row < this.size; ++row)
		{
			for(int col = 0; col < this.size; ++col)
			{
				if(this.getElement(row, col) != 0)
				{
					str += row + " " + col + " " + this.getElement(row, col) + "\n";
				}
			}
		}
		return str;
	}
	
	//Returns the size of the SparseMatrix
	public int getSize()
	{
		return this.size;
	}


public static void main(String args[])
{
	
	SparseMatrix a = new SparseMatrix();
	a.addElement(0, 0, 1);a.addElement(1, 1, 2);a.addElement(2, 2, 3);a.addElement(3, 3, 4);a.addElement(4, 4, 5);
	//a.removeElement(0,0);
	System.out.println(a.toString());
	//System.out.println(a.getElement(1,1));
	//System.out.println(a.getSize());
	System.out.println(a.determinant());
	
	
}
}
